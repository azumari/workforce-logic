//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Workforce.Logic.Charlie.Rest.WorkforceService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WorkforceService.ICharlieService")]
    public interface ICharlieService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/GetLocations", ReplyAction="http://tempuri.org/ICharlieService/GetLocationsResponse")]
        Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao[] GetLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/GetLocations", ReplyAction="http://tempuri.org/ICharlieService/GetLocationsResponse")]
        System.Threading.Tasks.Task<Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao[]> GetLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/GetRequest", ReplyAction="http://tempuri.org/ICharlieService/GetRequestResponse")]
        Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao[] GetRequest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/GetRequest", ReplyAction="http://tempuri.org/ICharlieService/GetRequestResponse")]
        System.Threading.Tasks.Task<Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao[]> GetRequestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/GetSchedule", ReplyAction="http://tempuri.org/ICharlieService/GetScheduleResponse")]
        Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao[] GetSchedule();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/GetSchedule", ReplyAction="http://tempuri.org/ICharlieService/GetScheduleResponse")]
        System.Threading.Tasks.Task<Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao[]> GetScheduleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/GetRide", ReplyAction="http://tempuri.org/ICharlieService/GetRideResponse")]
        Workforce.Logic.Charlie.Domain.WorkforceService.RideDao[] GetRide();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/GetRide", ReplyAction="http://tempuri.org/ICharlieService/GetRideResponse")]
        System.Threading.Tasks.Task<Workforce.Logic.Charlie.Domain.WorkforceService.RideDao[]> GetRideAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/InsertLocation", ReplyAction="http://tempuri.org/ICharlieService/InsertLocationResponse")]
        bool InsertLocation(Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao newlocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/InsertLocation", ReplyAction="http://tempuri.org/ICharlieService/InsertLocationResponse")]
        System.Threading.Tasks.Task<bool> InsertLocationAsync(Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao newlocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/InsertRequest", ReplyAction="http://tempuri.org/ICharlieService/InsertRequestResponse")]
        bool InsertRequest(Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao newrequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/InsertRequest", ReplyAction="http://tempuri.org/ICharlieService/InsertRequestResponse")]
        System.Threading.Tasks.Task<bool> InsertRequestAsync(Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao newrequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/InsertSchedule", ReplyAction="http://tempuri.org/ICharlieService/InsertScheduleResponse")]
        bool InsertSchedule(Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao newschedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/InsertSchedule", ReplyAction="http://tempuri.org/ICharlieService/InsertScheduleResponse")]
        System.Threading.Tasks.Task<bool> InsertScheduleAsync(Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao newschedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/InsertRide", ReplyAction="http://tempuri.org/ICharlieService/InsertRideResponse")]
        bool InsertRide(Workforce.Logic.Charlie.Domain.WorkforceService.RideDao newride);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/InsertRide", ReplyAction="http://tempuri.org/ICharlieService/InsertRideResponse")]
        System.Threading.Tasks.Task<bool> InsertRideAsync(Workforce.Logic.Charlie.Domain.WorkforceService.RideDao newride);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/UpdateLocation", ReplyAction="http://tempuri.org/ICharlieService/UpdateLocationResponse")]
        bool UpdateLocation(Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/UpdateLocation", ReplyAction="http://tempuri.org/ICharlieService/UpdateLocationResponse")]
        System.Threading.Tasks.Task<bool> UpdateLocationAsync(Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/UpdateRequest", ReplyAction="http://tempuri.org/ICharlieService/UpdateRequestResponse")]
        bool UpdateRequest(Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/UpdateRequest", ReplyAction="http://tempuri.org/ICharlieService/UpdateRequestResponse")]
        System.Threading.Tasks.Task<bool> UpdateRequestAsync(Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/UpdateSchedule", ReplyAction="http://tempuri.org/ICharlieService/UpdateScheduleResponse")]
        bool UpdateSchedule(Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/UpdateSchedule", ReplyAction="http://tempuri.org/ICharlieService/UpdateScheduleResponse")]
        System.Threading.Tasks.Task<bool> UpdateScheduleAsync(Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/UpdateRide", ReplyAction="http://tempuri.org/ICharlieService/UpdateRideResponse")]
        bool UpdateRide(Workforce.Logic.Charlie.Domain.WorkforceService.RideDao ride);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/UpdateRide", ReplyAction="http://tempuri.org/ICharlieService/UpdateRideResponse")]
        System.Threading.Tasks.Task<bool> UpdateRideAsync(Workforce.Logic.Charlie.Domain.WorkforceService.RideDao ride);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/DeleteLocation", ReplyAction="http://tempuri.org/ICharlieService/DeleteLocationResponse")]
        bool DeleteLocation(Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/DeleteLocation", ReplyAction="http://tempuri.org/ICharlieService/DeleteLocationResponse")]
        System.Threading.Tasks.Task<bool> DeleteLocationAsync(Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/DeleteRequest", ReplyAction="http://tempuri.org/ICharlieService/DeleteRequestResponse")]
        bool DeleteRequest(Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/DeleteRequest", ReplyAction="http://tempuri.org/ICharlieService/DeleteRequestResponse")]
        System.Threading.Tasks.Task<bool> DeleteRequestAsync(Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/DeleteSchedule", ReplyAction="http://tempuri.org/ICharlieService/DeleteScheduleResponse")]
        bool DeleteSchedule(Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/DeleteSchedule", ReplyAction="http://tempuri.org/ICharlieService/DeleteScheduleResponse")]
        System.Threading.Tasks.Task<bool> DeleteScheduleAsync(Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/DeleteRide", ReplyAction="http://tempuri.org/ICharlieService/DeleteRideResponse")]
        bool DeleteRide(Workforce.Logic.Charlie.Domain.WorkforceService.RideDao ride);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharlieService/DeleteRide", ReplyAction="http://tempuri.org/ICharlieService/DeleteRideResponse")]
        System.Threading.Tasks.Task<bool> DeleteRideAsync(Workforce.Logic.Charlie.Domain.WorkforceService.RideDao ride);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICharlieServiceChannel : Workforce.Logic.Charlie.Rest.WorkforceService.ICharlieService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CharlieServiceClient : System.ServiceModel.ClientBase<Workforce.Logic.Charlie.Rest.WorkforceService.ICharlieService>, Workforce.Logic.Charlie.Rest.WorkforceService.ICharlieService {
        
        public CharlieServiceClient() {
        }
        
        public CharlieServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CharlieServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CharlieServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CharlieServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao[] GetLocations() {
            return base.Channel.GetLocations();
        }
        
        public System.Threading.Tasks.Task<Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao[]> GetLocationsAsync() {
            return base.Channel.GetLocationsAsync();
        }
        
        public Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao[] GetRequest() {
            return base.Channel.GetRequest();
        }
        
        public System.Threading.Tasks.Task<Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao[]> GetRequestAsync() {
            return base.Channel.GetRequestAsync();
        }
        
        public Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao[] GetSchedule() {
            return base.Channel.GetSchedule();
        }
        
        public System.Threading.Tasks.Task<Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao[]> GetScheduleAsync() {
            return base.Channel.GetScheduleAsync();
        }
        
        public Workforce.Logic.Charlie.Domain.WorkforceService.RideDao[] GetRide() {
            return base.Channel.GetRide();
        }
        
        public System.Threading.Tasks.Task<Workforce.Logic.Charlie.Domain.WorkforceService.RideDao[]> GetRideAsync() {
            return base.Channel.GetRideAsync();
        }
        
        public bool InsertLocation(Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao newlocation) {
            return base.Channel.InsertLocation(newlocation);
        }
        
        public System.Threading.Tasks.Task<bool> InsertLocationAsync(Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao newlocation) {
            return base.Channel.InsertLocationAsync(newlocation);
        }
        
        public bool InsertRequest(Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao newrequest) {
            return base.Channel.InsertRequest(newrequest);
        }
        
        public System.Threading.Tasks.Task<bool> InsertRequestAsync(Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao newrequest) {
            return base.Channel.InsertRequestAsync(newrequest);
        }
        
        public bool InsertSchedule(Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao newschedule) {
            return base.Channel.InsertSchedule(newschedule);
        }
        
        public System.Threading.Tasks.Task<bool> InsertScheduleAsync(Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao newschedule) {
            return base.Channel.InsertScheduleAsync(newschedule);
        }
        
        public bool InsertRide(Workforce.Logic.Charlie.Domain.WorkforceService.RideDao newride) {
            return base.Channel.InsertRide(newride);
        }
        
        public System.Threading.Tasks.Task<bool> InsertRideAsync(Workforce.Logic.Charlie.Domain.WorkforceService.RideDao newride) {
            return base.Channel.InsertRideAsync(newride);
        }
        
        public bool UpdateLocation(Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao location) {
            return base.Channel.UpdateLocation(location);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateLocationAsync(Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao location) {
            return base.Channel.UpdateLocationAsync(location);
        }
        
        public bool UpdateRequest(Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao request) {
            return base.Channel.UpdateRequest(request);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRequestAsync(Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao request) {
            return base.Channel.UpdateRequestAsync(request);
        }
        
        public bool UpdateSchedule(Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao schedule) {
            return base.Channel.UpdateSchedule(schedule);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateScheduleAsync(Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao schedule) {
            return base.Channel.UpdateScheduleAsync(schedule);
        }
        
        public bool UpdateRide(Workforce.Logic.Charlie.Domain.WorkforceService.RideDao ride) {
            return base.Channel.UpdateRide(ride);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRideAsync(Workforce.Logic.Charlie.Domain.WorkforceService.RideDao ride) {
            return base.Channel.UpdateRideAsync(ride);
        }
        
        public bool DeleteLocation(Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao location) {
            return base.Channel.DeleteLocation(location);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteLocationAsync(Workforce.Logic.Charlie.Domain.WorkforceService.LocationDao location) {
            return base.Channel.DeleteLocationAsync(location);
        }
        
        public bool DeleteRequest(Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao request) {
            return base.Channel.DeleteRequest(request);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRequestAsync(Workforce.Logic.Charlie.Domain.WorkforceService.RequestDao request) {
            return base.Channel.DeleteRequestAsync(request);
        }
        
        public bool DeleteSchedule(Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao schedule) {
            return base.Channel.DeleteSchedule(schedule);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteScheduleAsync(Workforce.Logic.Charlie.Domain.WorkforceService.ScheduleDao schedule) {
            return base.Channel.DeleteScheduleAsync(schedule);
        }
        
        public bool DeleteRide(Workforce.Logic.Charlie.Domain.WorkforceService.RideDao ride) {
            return base.Channel.DeleteRide(ride);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRideAsync(Workforce.Logic.Charlie.Domain.WorkforceService.RideDao ride) {
            return base.Channel.DeleteRideAsync(ride);
        }
    }
}
